// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  phoneNumber     String?   @map("phone_number")
  address         String?
  role            Role      @default(CONSUMER)
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  complaints      Complaint[]
  reviews         DestinationReview[]
  adminComplaints Complaint[] @relation("AdminComplaints")
  adminDestinations TouristDestination[] @relation("AdminDestinations")
  sessions        Session[]
  bookingTransactions booking_transaction[]
  
  @@map("users")
}

enum JenisKendaraan {
  MOTOR
  MOBIL
  BIG_BUS
  MINI_BUS
  SEPEDA
}

model booking_transaction {
  id                    Int      @id @default(autoincrement())
  nama                  String
  phone                 String
  email                 String
  kendaraan             JenisKendaraan
  jumlah_kendaraan      Int
  customer_bank_name    String
  customer_bank_account String
  customer_bank_number  String
  proof                 String
  tanggal               DateTime
  harga_satuan          Int
  total_amount          Int
  is_paid               Boolean
  quantity              Int
  booking_trx_id        String
  destinasi_wisata_id   String
  user_id               String
  user                  User     @relation(fields: [user_id], references: [id])
  tourist_destination   TouristDestination @relation(fields: [destinasi_wisata_id], references: [id])
  pengunjung            pengunjung[]
}

model pengunjung {
  id                    Int      @id @default(autoincrement())
  nama                  String
  usia                  Int
  email                 String
  destinasi_wisata_id   String
  booking_transaction_id Int
  booking_transaction   booking_transaction @relation(fields: [booking_transaction_id], references: [id])
  tourist_destination   TouristDestination @relation(fields: [destinasi_wisata_id], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@id([identifier, token])
  @@map("verification_tokens")
}

model DestinationCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  destinations TouristDestination[]
  
  @@map("destination_categories")
}

model TouristDestination {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  address       String?
  latitude      Decimal?  @db.Decimal(10, 8)
  longitude     Decimal?  @db.Decimal(11, 8)
  categoryId    String?   @map("category_id")
  adminId       String?   @map("admin_id")
  status        DestinationStatus @default(ACTIVE)
  openingTime   DateTime? @map("opening_time") @db.Time
  closingTime   DateTime? @map("closing_time") @db.Time
  thumbnailUrl  String?   @map("thumbnail_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  category      DestinationCategory? @relation(fields: [categoryId], references: [id])
  admin         User?     @relation("AdminDestinations", fields: [adminId], references: [id])
  photos        DestinationPhoto[]
  tickets       Ticket[]
  complaints    Complaint[]
  reviews       DestinationReview[]
  booking_transactions booking_transaction[]
  pengunjung        pengunjung[]
  
  @@map("tourist_destinations")
}

model DestinationPhoto {
  id            String    @id @default(cuid())
  destinationId String    @map("destination_id")
  filePath      String    @map("file_path")
  caption       String?
  photoType     PhotoType @default(GALLERY) @map("photo_type")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  destination   TouristDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  
  @@map("destination_photos")
}

model Ticket {
  id            String    @id @default(cuid())
  destinationId String    @map("destination_id")
  name          String
  description   String?
  ticketType    TicketType @map("ticket_type")
  price         Decimal   @db.Decimal(10, 2)
  quotaPerDay   Int       @map("quota_per_day")
  status        TicketStatus @default(AVAILABLE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  
  @@map("tickets")
}

model Complaint {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  destinationId String    @map("destination_id")
  jenis         String
  narahubung    String
  deskripsi     String
  longitude     String
  latitude      String
  attachment    String?
  status        ComplaintStatus @default(NEW)
  response      String?
  responseDate  DateTime?
  adminId       String?   @map("admin_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user          User      @relation(fields: [userId], references: [id])
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  admin         User?     @relation("AdminComplaints", fields: [adminId], references: [id])
  
  @@map("complaints")
}


model DestinationReview {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  destinationId String    @map("destination_id")
  rating        Int
  comment       String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id])
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  
  @@map("destination_reviews")
}


// Enums
enum Role {
  // nextjs - database
  SUPER_ADMIN   @map("super_admin")
  TOURISM_ADMIN @map("tourism_admin")
  CONSUMER      @map("consumer")
}

enum UserStatus {
  ACTIVE        @map("active")
  INACTIVE      @map("inactive")
}

enum DestinationStatus {
  ACTIVE        @map("active")
  INACTIVE      @map("inactive")
}

enum PhotoType {
  MAIN          @map("main")
  GALLERY       @map("gallery")
}

enum TicketType {
  WEEKDAY       @map("weekday")
  WEEKEND       @map("weekend")
  HOLIDAY       @map("holiday")
}

enum TicketStatus {
  AVAILABLE     @map("available")
  UNAVAILABLE   @map("unavailable")
}

enum ComplaintStatus {
  NEW           @map("new")
  IN_PROGRESS   @map("in_progress")
  RESOLVED      @map("resolved")
  REJECTED      @map("rejected")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

