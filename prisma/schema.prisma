// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  phoneNumber     String?   @map("phone_number")
  address         String?
  role            Role      @default(CONSUMER)
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  accounts        Account[]
  sessions        Session[]
  destinations    TouristDestination[]
  orders          Order[]
  complaints      Complaint[]
  reviews         DestinationReview[]
  adminComplaints Complaint[] @relation("AdminComplaints")
  
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  
  @@id([identifier, token])
  @@map("verification_tokens")
}

model DestinationCategory {
  id          String    @id @default(cuid())
  name        String
  nameId      String?   @map("name_id")
  description String?
  icon        String?
  color       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  
  destinations TouristDestination[]
  
  @@map("destination_categories")
}

model TouristDestination {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  address       String?
  latitude      Decimal?  @db.Decimal(10, 8)
  longitude     Decimal?  @db.Decimal(11, 8)
  categoryId    String?   @map("category_id")
  adminId       String?   @map("admin_id")
  status        DestinationStatus @default(ACTIVE)
  openingTime   DateTime? @map("opening_time") @db.Time
  closingTime   DateTime? @map("closing_time") @db.Time
  thumbnailUrl  String?   @map("thumbnail_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  category      DestinationCategory? @relation(fields: [categoryId], references: [id])
  admin         User?     @relation(fields: [adminId], references: [id])
  photos        DestinationPhoto[]
  tickets       Ticket[]
  complaints    Complaint[]
  reviews       DestinationReview[]
  orderItems    OrderItem[]
  
  @@map("tourist_destinations")
}

model DestinationPhoto {
  id            String    @id @default(cuid())
  destinationId String    @map("destination_id")
  filePath      String    @map("file_path")
  caption       String?
  photoType     PhotoType @default(GALLERY) @map("photo_type")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  destination   TouristDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  
  @@map("destination_photos")
}

model Ticket {
  id            String    @id @default(cuid())
  destinationId String    @map("destination_id")
  name          String
  description   String?
  ticketType    TicketType @map("ticket_type")
  price         Decimal   @db.Decimal(10, 2)
  quotaPerDay   Int       @map("quota_per_day")
  status        TicketStatus @default(AVAILABLE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  orderItems    OrderItem[]
  
  @@map("tickets")
}

model Order {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  orderCode       String    @unique @map("order_code")
  visitDate       DateTime  @map("visit_date")
  totalAmount     Decimal   @db.Decimal(10, 2) @map("total_amount")
  status          OrderStatus @default(PENDING)
  paymentDeadline DateTime? @map("payment_deadline")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  user            User      @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  paymentTransaction PaymentTransaction?
  
  @@map("orders")
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String    @map("order_id")
  ticketId      String    @map("ticket_id")
  destinationId String    @map("destination_id")
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10, 2) @map("unit_price")
  subtotal      Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  eTickets      ETicket[]
  
  @@map("order_items")
}

model PaymentTransaction {
  id              String    @id @default(cuid())
  orderId         String    @unique @map("order_id")
  xenditPaymentId String?   @map("xendit_payment_id")
  paymentUrl      String?   @map("payment_url")
  paymentMethod   String?   @map("payment_method")
  paymentChannel  String?   @map("payment_channel")
  amount          Decimal   @db.Decimal(10, 2)
  status          String?
  callbackData    Json?     @map("callback_data")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  order           Order     @relation(fields: [orderId], references: [id])
  
  @@map("payment_transactions")
}

model Complaint {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  destinationId String    @map("destination_id")
  subject       String
  content       String    @db.Text
  attachment    String?
  status        ComplaintStatus @default(NEW)
  response      String?   @db.Text
  responseDate  DateTime? @map("response_date")
  adminId       String?   @map("admin_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user          User      @relation(fields: [userId], references: [id])
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  admin         User?     @relation("AdminComplaints", fields: [adminId], references: [id])
  
  @@map("complaints")
}

model ETicket {
  id            String    @id @default(cuid())
  orderItemId   String    @map("order_item_id")
  ticketCode    String    @unique @map("ticket_code")
  qrCode        String?   @map("qr_code")
  status        ETicketStatus @default(ACTIVE)
  usedAt        DateTime? @map("used_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
  
  @@map("e_tickets")
}

model DestinationReview {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  destinationId String    @map("destination_id")
  rating        Int
  comment       String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id])
  destination   TouristDestination @relation(fields: [destinationId], references: [id])
  
  @@map("destination_reviews")
}

// GIS Related Tables

model TransportationType {
  id            String    @id @default(cuid())
  name          String
  nameId        String?   @map("name_id")
  icon          String?
  color         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  
  transportationPoints TransportationPoint[]
  
  @@map("transportation_types")
}

model TransportationPoint {
  id                  String    @id @default(cuid())
  transportationTypeId String    @map("transportation_type_id")
  name                String
  address             String?
  latitude            Decimal?  @db.Decimal(10, 8)
  longitude           Decimal?  @db.Decimal(11, 8)
  createdAt           DateTime  @default(now()) @map("created_at")
  
  transportationType  TransportationType @relation(fields: [transportationTypeId], references: [id])
  
  @@map("transportation_points")
}

model District {
  id                String    @id @default(cuid())
  name              String
  city              String?
  province          String?
  polygonCoordinates Json?    @map("polygon_coordinates")
  centerLatitude    Decimal?  @db.Decimal(10, 8) @map("center_latitude")
  centerLongitude   Decimal?  @db.Decimal(11, 8) @map("center_longitude")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  @@map("districts")
}

// Enums
enum Role {
  SUPER_ADMIN   @map("super_admin")
  TOURISM_ADMIN @map("tourism_admin")
  CONSUMER      @map("consumer")
}

enum UserStatus {
  ACTIVE        @map("active")
  INACTIVE      @map("inactive")
}

enum DestinationStatus {
  ACTIVE        @map("active")
  INACTIVE      @map("inactive")
}

enum PhotoType {
  MAIN          @map("main")
  GALLERY       @map("gallery")
}

enum TicketType {
  WEEKDAY       @map("weekday")
  WEEKEND       @map("weekend")
  HOLIDAY       @map("holiday")
}

enum TicketStatus {
  AVAILABLE     @map("available")
  UNAVAILABLE   @map("unavailable")
}

enum OrderStatus {
  PENDING       @map("pending")
  WAITING_PAYMENT @map("waiting_payment")
  PAID          @map("paid")
  CANCELLED     @map("cancelled")
  REFUNDED      @map("refunded")
}

enum ComplaintStatus {
  NEW           @map("new")
  IN_PROGRESS   @map("in_progress")
  RESOLVED      @map("resolved")
  REJECTED      @map("rejected")
}

enum ETicketStatus {
  ACTIVE        @map("active")
  USED          @map("used")
  EXPIRED       @map("expired")
}
